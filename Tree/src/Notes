Tree

Node :
    int val;
    Node left;
    Node right;

Properties:
* size : Total number of node
* child & Parent
* Siblings
* Edge - Line that connecting two nodes
* height -maximum number of edges from the node & leaf node
* leaf nodes - last node
* level - height of root - height of node
* Degree - number of children for node - this can be 0,1,2


Types of Binary tree:
* Complete binary tree : All the levels are full apart from last level is full from left to right (when filling the last level it should be filled from left to right)

* Full binary tree / Strict binary tree : every node should have zero or two children

* Perfect binary tree : All levels are full

* Height balanced binary tree : Avg height o(logn)

* Skewed binary tree : Every node has only one child

* Ordered binary tree : Every node has some property

Properties that will help to solve problem
------------------------------------------
* Perfect binary tree, height = h
  Total nodes = 2pow(h+1) - 1
  perfect bt will have maximum number of node.

* String bt , N -> leaf nodes
              N-1 -> internal nodes
   No. of leaf node = No. of internal nodes +1

* No. of leaf node = 1+No. of internal node with two children(No including root)

Balanced tree
-------------
Height difference between any two nodes is should be 0 or 1

Binary Search tree(it is a type of binary tree)
-----------------------------------------------
*left hand side node value will be smaller and right hand side node value will be greater


Traversal method:
1.Pre-order
  N -> L -> R
2.In-order
  L -> N -> R
  -> used to get sorted array from BST
3.Post-order
  L -> R -> N
  ->can be used when  you have to delete the node2


Self balancing binary tree : AVL Tree
--------------------------

steps
-----
* insert normally node N
* Start from node N & find the node that makes the tree unbalance from the bottom
* use 1 of the 4 rules

----------------------------------------------------------------------------------------------------------------

segment tree
-------------
segment : Perform query on a range
segment tree : ST is a binary tree which has internal info and operation

* segment tree is full binary tree (i.e every node except leaf node has two children)

Cases :
-----
1.Node interval is inside query index
2.Node interval is completely outside query interval (node start interval)>(query end index)
3.overlaping


-------------------------------------------------------------------------------------------------------
When to use BSF?
1.when answer lies near the root node
2.when you are asked to search by level

leetcode qtn -BSF
102. https://leetcode.com/problems/binary-tree-level-order-traversal/description/
103. https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/description/
637.https://leetcode.com/problems/average-of-levels-in-binary-tree/description/
107.https://leetcode.com/problems/binary-tree-level-order-traversal-ii/
116.https://leetcode.com/problems/populating-next-right-pointers-in-each-node/
199.https://leetcode.com/problems/binary-tree-right-side-view/description/
993.https://leetcode.com/problems/cousins-in-binary-tree/description/
101.https://leetcode.com/problems/symmetric-tree/description/

leetcode qtn - DSF
-----------------
543.https://leetcode.com/problems/diameter-of-binary-tree/description/
226.https://leetcode.com/problems/invert-binary-tree/description/
98.https://leetcode.com/problems/validate-binary-search-tree/description/
236.https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/description/
230.https://leetcode.com/problems/kth-smallest-element-in-a-bst/description/
105.https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/description/
